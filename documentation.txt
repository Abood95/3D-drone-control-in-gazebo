Hardware configs: 
Connections:

SCL =====> D6
SDA =====> D7 
Vcc =====> 3.3 v
GND 


Versions:
Arduino IDE version === 1.8.9
ESP === 2.6.0



First I learned to use the socket interface in Python. 
I used i t to send a space character and wait until I get a response
Once I do I continue on reading in an infinite loop
Next I am creating a ros package to hold the node
1. I created the catkin_ws
$ mkdir -p ~/catkin_ws/src
$ cd ~/catkin_ws
$ catkin_make
I created a package 
using 
$ cd ~/catkin_ws/src
$ catkin_create_pkg imu_raw std_msgs geometry_msgs sensor_msgs rospy
Then I created a scripts folder 
$ cd ~/catkin_ws/src/imu_raw/
$ mkdir scripts
$ cd scripts
I added a file for the node `read_socket.py`
I made it executable using `chmod u+x read_socket.py`
I also added the imu_tools package 
$ cd catkin_ws/src
$ git clone -b melodic https://github.com/ccny-ros-pkg/imu_tools.git
$ rosdep install imu_tools
Then I ran catkin make
$ cd ~/catkin_ws
$ catkin_make
I run the complementary filter: 
$ rosrun imu_complementary_filter complementary_filter_node
and my creadted node as:
$ rosrun imu_raw read_sock.py

Now we should have the following up and running: 
roscore 
complementary filter 
read_sock.py

Next open rviz
$rosrun rviz rviz 

in the left panel click "add" and choose imu under rviz_imu_plugin
now you have imu in the left panel. navigate to topic under imu menu and write imu/data (the topic which complementary filter publishes on)

now navigate to global options in the left panel and write imu in the fixed frame option. This should resolve the error you just encountered due to ambigious references. 

Next we configure the Gazebo environment:
This will download the needed files for the drone simulation and ignition math library that's needed for all the math functions.
$ cd ~/catkin_ws/
$ cd /src
$ git clone https://github.com/MohamedKasem99/parrot_ardrone_for_Ros_Melodic_Gazebo9_update.git
$ sudo sh -c 'echo "deb http://packages.osrfoundation.org/gazebo/ubuntu-stable `lsb_release -cs` main" > /etc/apt/sources.list.d/gazebo-stable.list'
$ wget http://packages.osrfoundation.org/gazebo.key -O - | sudo apt-key add -
$ sudo apt-get update
$ sudo apt-get install libignition-math4-dev -y

compile the packages
$ cd ~/catkin_ws
$ export CXXFLAGS=-isystem\ /usr/include/ignition/math4
$ source /opt/ros/kinetic/setup.bash
$ catkin_make

$ source devel/setup.bash
$ rospack profile

Now the package is downloaded, compiled and ready to be launched.

Another problem arises when we try to excute catkin_make. To solve it access the cpp files and change the variable names as suggested in the
errors on the terminal window. This is because we are using different version in which variable names are not entirely consistent. 

I adapted all .cpp files to the new Gazebo API and ROS melodic. (If you pull the repository and run into some problems with the parrot_ardrone files, you
can pull my updated repo for parrot_ardrone from this link: https://github.com/MohamedKasem99/parrot_ardrone_for_Ros_Melodic_Gazebo9_update and use it
instead of the regular parrot_ardrone repo that's outdated).


Now we are trying to launch the simulation and nodes. I edited the launch files and some other scripts.

to run Everything including Gazebo: 
$ roslaunch drone_construct main.launch 
$ roslaunch drone_construct intro.launch 

This will launch the Gazebo environment and setup the world and the drone for you,as well as construct the ros network 
which can be validated by running rqt_graph by: 
$ rosrun rqt_graph rqt_graph

Next, perform quantitative analysis for the data over UDP. 
Also, write a node that takes IMU_data and converts it to cmd_velocity twist msgs and publish them to the cmd_vel topic. This should let you control 
the gazebo drone.

To takeoff the drone:
$ rostopic pub /drone/takeoff std_msgs/Empty "{}" 
To land the drone: 
rostopic pub /drone/land std_msgs/Empty "{}" 

After that to simulate Everything, run this command, after setting up the teleop_twist_keyboard by these commands: 
$ sudo apt-get install ros-melodic-teleop-twist-keyboard
$ rosrun teleop_twist_keyboard teleop_twist_keyboard.py

This will lanuch a node that publishes to cmd_vel topic the control data as suggested in the terminal window.



